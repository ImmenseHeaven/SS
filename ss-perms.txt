#!/bin/bash

####################################################################################################
#### author: SimpleStack ###########################################################################
#### mirror: https://simplestack.git.supercluster.io/ss-perms.txt ##################################
#### path: /var/www/ss-perms #######################################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: Resets all file and user permissions across the entire SimpleStack server ############
#### module version: Ubuntu 20.04 LTS + WordPress 5.4.x ############################################
####################################################################################################

## include SimpleStack configuration ##
source /var/www/ss-config

####################################################################################################
#### SimpleStack: Critical Bash Functions (Aliases) For This Script To Work ########################
####################################################################################################

## the below functions are hardcoded into every SimpleStack script to ensure reliability ##
## this also speeds up processing times by avoiding repeated inline commands ##

## variables ##
UBUNTU_VERSION=`lsb_release -rs`

## apt alias flags ##
function apt {
    export DEBIAN_FRONTEND=noninteractive
    export DEBIAN_PRIORITY=critical
    export PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    command /usr/bin/apt --yes --quiet --option Dpkg::Options::=--force-confold --option Dpkg::Options::=--force-confdef "$@"
}

## add-apt-repository alias flags ##
function add-apt-repository {
    export DEBIAN_FRONTEND=noninteractive
    export DEBIAN_PRIORITY=critical
    export PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    command /usr/bin/add-apt-repository --yes "$@"
}

## wget alias flags ##
function wget {
    command wget --no-check-certificate --no-cache --no-cookies --tries=3 --timeout=15 "$@"
}

## mysql alias flags ##
function mysql {
    command mysql --user=root --host=localhost --protocol=socket --port=3306 --force "$@"
}

## cp alias flags ##
function cp {
    command cp -R -f -d --no-preserve=mode,ownership "$@"
}

## rsync alias flags ##
function rsync {
    command rsync -aI --ignore-errors "$@"
}

## unzip alias flags ##
function unzip {
    command unzip -o "$@"
}

## mkdir alias flags ##
function mkdir {
    command mkdir -p "$@"
}

## rm alias flags ##
function rm {
    command rm -R -f "$@"
}

## ln alias flags ##
function ln {
    command ln -s -f "$@"
}

####################################################################################################
#### SS-Perms: Reset Ubuntu (System Files + Users/Groups) Permissions ##############################
####################################################################################################

## here we ensure permissions are safe for general system (Linux) files and otherwise ##
## since this is a single-user stack we can lock these down without issues ##

## MESSAGE ##
echo -e "\e[36mResetting all file permissions across entire SimpleStack server...\e[0m"

## Ubuntu system files ##
chown root:root /etc/ssh/sshd_config ## must be root:root
chown root:root /etc/sudoers ## must be root:root
chown root:root /var/spool/cron/crontabs/root ## must be root:root
chown root:root /etc/sysctl.conf ## must be root:root
chmod 0640 /etc/ssh/sshd_config ## 0640 is enough
chmod 0640 /etc/sudoers ## 0640 is enough
chmod 0640 /var/spool/cron/crontabs/root ## 0640 is enough
chmod 0640 /etc/sysctl.conf ## 0640 is enough

## ensure wordpress group exists ##
addgroup wordpress 

## add SFTP_USER and www-data to wordpress group + add SFTP_USER to www-data group ##
adduser $SFTP_USER wordpress
adduser www-data wordpress
adduser $SFTP_USER www-data

## SSH public keys (optional) ##
mkdir /var/www/meta/.ssh
chown $SUDO_USER:$SUDO_USER /var/www/meta/.ssh
chmod 0775 /var/www/meta/.ssh ## should be 0775 as per Ubuntu docs
touch /var/www/meta/.ssh/authorized_keys
chown $SUDO_USER:$SUDO_USER /var/www/meta/.ssh/authorized_keys
chmod 0664 /var/www/meta/.ssh/authorized_keys ## should be 0664 as per Ubuntu docs

####################################################################################################
#### SS-Perms: Reset SimpleStack Core Files Permissions ############################################
####################################################################################################

## SimpleStack Core bash scripts and cron jobs are still executable by root regardless ##
## but these permissions help ensure consistency and better overall security ##

## ensure core directories exist (except html) ##
mkdir /var/www
mkdir /var/www/cache
mkdir /var/www/cache/fastcgi
mkdir /var/www/cache/opcache
mkdir /var/www/logs
mkdir /var/www/meta
mkdir /var/www/meta/.ssh

## ensure misc files exist (makes things look pretty and suppresses error messages) ##
if [[ ! -f "/var/www/meta/wp.sql" ]]; then 
    touch "/var/www/meta/wp.sql"; 
fi

## chroot (SFTP) user directory ##
chown root:root /var ## must be root:root
chown root:root /var/www ## must be root:root
chmod 0755 /var/www ## must be 0755

## SimpleStack core scripts ##
chown root:root /var/www/*cron* ## must be root:root
chown root:root /var/www/ss* ## must be root:root
chmod 0740 /var/www/*cron* ## 0740 is enough
chmod 0740 /var/www/ss* ## 0740 is enough

## SQL dump file (we want SFTP users to be able to access) ##
chown -R $SFTP_USER:www-data /var/www/meta/wp.sql ## $SFTP_USER:www-data to better support SFTP access
chmod 0640 /var/www/meta/wp.sql ## 0640 should be enough (or 644)

## no worries if the SFTP user accesses this stuff (but www-data access is the priority) ##
chown www-data:www-data /var/www/cache ## must be www-data:www-data
chown www-data:www-data /var/www/cache/fastcgi ## must be www-data:www-data
chown www-data:www-data /var/www/cache/opcache ## must be www-data:www-data
chown www-data:www-data /var/www/logs ## must be www-data:www-data
chown www-data:www-data /var/www/meta ## must be www-data:www-data
chmod 0755 /var/www/cache ## 775 should also work
chmod 0755 /var/www/cache/fastcgi ## 775 should also work
chmod 0755 /var/www/cache/opcache ## 755 should also work
chmod 0755 /var/www/logs ## 755 should also work
chmod 0755 /var/www/meta ## 755 should also work

## ensure log files exist ##
if [ ! -f "/var/www/logs/clamav.log" ]; then touch "/var/www/logs/clamav.log"; fi
if [ ! -f "/var/www/logs/error.log" ]; then touch "/var/www/logs/error.log"; fi
if [ ! -f "/var/www/logs/mysql-gen.log" ]; then touch "/var/www/logs/mysql-gen.log"; fi
if [ ! -f "/var/www/logs/mysql-error.log" ]; then touch "/var/www/logs/mysql-error.log"; fi
if [ ! -f "/var/www/logs/mysql-slow.log" ]; then touch "/var/www/logs/mysql-slow.log"; fi
if [ ! -f "/var/www/logs/nginx.log" ]; then touch "/var/www/logs/nginx.log"; fi
if [ ! -f "/var/www/logs/redis.log" ]; then touch "/var/www/logs/redis.log"; fi

## individual log files ##
chown clamav:clamav /var/www/logs/clamav*.log*
chown www-data:www-data /var/www/logs/error*.log*
chown mysql:mysql /var/www/logs/mysql*.log*
chown www-data:www-data /var/www/logs/nginx*.log*
chown redis:redis /var/www/logs/redis*.log*

chmod 0755 /var/www/logs/*.log ## 6755 should also work

## ensure unix formatting (avoids syntax errors and otherwise) ##
dos2unix /var/www/*cron*
dos2unix /var/www/ss*

####################################################################################################
#### SS-Perms: Adminer Permissions #################################################################
####################################################################################################

chmod 0664 /var/www/meta/adminer.php &> /dev/null

####################################################################################################
#### SS-Perms: Ensure Critical Public HTML Subdirectories + Files Exist ############################
####################################################################################################

## ensure critical directories exist (will not overwrite) ##
mkdir /var/www/html
mkdir /var/www/html/.well-known
mkdir /var/www/html/.well-known/acme-challenge
mkdir /var/www/html/wp-content
mkdir /var/www/html/wp-content/languages
mkdir /var/www/html/wp-content/mu-plugins
mkdir /var/www/html/wp-content/temp
mkdir /var/www/html/wp-content/uploads
mkdir /var/www/html/wp-content/upgrade

## ensure staging directories exist (will not overwrite) ##
mkdir /var/www/html/staging

## ensure files exist (production only because ss-sync will copy to staging) ##
if [ ! -f "/var/www/html/wp-content/blacklist.txt" ]; then touch "/var/www/html/wp-content/blacklist.txt"; fi
if [ ! -f "/var/www/html/wp-content/functions.php" ]; then touch "/var/www/html/wp-content/functions.php"; fi

####################################################################################################
#### SS-Perms: Reset Public HTML Directory Permissions #############################################
####################################################################################################

## accessed by server for e.g. Cerbot but also by SFTP user for things like Stripe ##
chown -R $SFTP_USER:www-data /var/www/html/.well-known
chmod 0755 /var/www/html/.well-known

## production ##
chown -R $SFTP_USER:wordpress /var/www/html
chown -R www-data:wordpress /var/www/html/wp-content/temp
chown -R www-data:wordpress /var/www/html/wp-content/upgrade
chown www-data:wordpress /var/www/html/wp-content/blacklist.txt
chmod 0775 /var/www/html ## 0775 (0755 not enough)
chmod 0640 /var/www/html/wp-config.php  ## 0440 probably better (0660 not needed as wp-config protected in SimpleStack)
chmod 0440 /var/www/html/wp-content/blacklist.txt ## 0440 (read-only)
find /var/www/html/ -type d -exec chmod 0775 {} \; ## 0775 (0755 not enough)
find /var/www/html/ -type f -exec chmod 0664 {} \; ## 0664 (0644 not enough)

## staging ##
chown www-data:wordpress /var/www/html/staging/wp-content/blacklist.txt
chmod 0640 /var/www/html/staging/wp-config.php ## 0440 probably better (0660 not needed as wp-config protected in SimpleStack)
chmod 0440 /var/www/html/staging/wp-content/blacklist.txt ## 0440 (read-only)

####################################################################################################
#### SS-Perms: Reset MU (Must-Use) Plugins Permissions #############################################
####################################################################################################

## here we reset permissions for MU plugins, object-cache.php, and functions.php files ##
## functions.php might be edited via SFTP so we must keep that in mind here ##

## production ##
chown -R www-data:wordpress /var/www/html/wp-content/mu-plugins
chown www-data:wordpress /var/www/html/wp-content/object-cache.php
chown $SFTP_USER:wordpress /var/www/html/wp-content/functions.php
find /var/www/html/wp-content/mu-plugins/ -type d -exec chmod 0755 {} \;
find /var/www/html/wp-content/mu-plugins/ -type f -exec chmod 0644 {} \;
chmod 0755 /var/www/html/wp-content/object-cache.php
chmod 0755 /var/www/html/wp-content/functions.php

## staging ##
chown -R www-data:wordpress /var/www/html/staging/wp-content/mu-plugins
chown www-data:wordpress /var/www/html/staging/wp-content/object-cache.php
chown $SFTP_USER:wordpress /var/www/html/staging/wp-content/functions.php
find /var/www/html/staging/wp-content/mu-plugins/ -type d -exec chmod 0755 {} \;
find /var/www/html/staging/wp-content/mu-plugins/ -type f -exec chmod 0644 {} \;
chmod 0755 /var/www/html/staging/wp-content/object-cache.php
chmod 0755 /var/www/html/staging/wp-content/functions.php

####################################################################################################
#### Reset Permissions: SimpleStack (LEMP) Modules #################################################
####################################################################################################

mkdir /var/run/mysqld
mkdir /var/run/php
mkdir /var/run/redis

## ensure files exist ##
if [ ! -f "/etc/ssl/nginx.crt" ]; then touch "/etc/ssl/nginx.crt"; fi
if [ ! -f "/etc/ssl/nginx.key" ]; then touch "/etc/ssl/nginx.key"; fi
if [ ! -f "/etc/ssl/nginx.pem" ]; then touch "/etc/ssl/nginx.pem"; fi

chown root:root /etc/nginx/nginx.conf &> /dev/null
chown root:root /etc/nginx/fastcgi.conf &> /dev/null
chown root:root /etc/ssl/nginx.crt &> /dev/null
chmod -R 700 /etc/ssl/nginx.crt &> /dev/null
chown root:root /etc/ssl/nginx.key &> /dev/null
chmod -R 700 /etc/ssl/nginx.key &> /dev/null
chown root:root /etc/ssl/nginx.pem &> /dev/null
chmod -R 700 /etc/ssl/nginx.pem &> /dev/null

## reset MySQL permissions ##
chown mysql:mysql /var/run/mysqld
chown root:root /etc/mysql/my.cnf
chown root:root /etc/mysql/mysql.cnf
chown root:root /etc/mysql/mysql.conf.d/mysqld.cnf
chmod 0755 /etc/mysql/my.cnf

## always run WP-CLI as the www-data user (and allow SFTP user to run it) ##
chown root:root /usr/local/bin/ &> /dev/null
chown www-data:www-data /usr/local/bin/wp &> /dev/null
chmod 0755 /usr/local/bin/wp &> /dev/null

# chown www-data:www-data /var/run/php
chown root:root /etc/php/7.2/fpm/php.ini &> /dev/null
chown root:root /etc/php/7.2/fpm/php-fpm.conf &> /dev/null
chown root:root /etc/php/7.2/cli/php.ini &> /dev/null
chown root:root /etc/php/7.4/fpm/php.ini &> /dev/null
chown root:root /etc/php/7.4/fpm/php-fpm.conf &> /dev/null
chown root:root /etc/php/7.4/cli/php.ini &> /dev/null

chown redis:redis /var/run/redis &> /dev/null
chown redis:redis /etc/redis/redis.conf &> /dev/null

####################################################################################################
#### SS-Perms: Flush Redis (Object Cache) ##########################################################
####################################################################################################

redis-cli flushall &> /dev/null

####################################################################################################
#### SimpleStack: External References Used To Improve This Script (Thanks, Interwebz) ##############
####################################################################################################

## Ref: http://www.unixmantra.com/2013/04/unix-linux-file-permissions.html
## Ref: https://unix.stackexchange.com/questions/203371/run-script-sh-vs-bash-script-sh-permission-denied/203372#203372
## Ref: https://stackoverflow.com/questions/14372645/convert-dos2unix-line-endings-for-all-files-in-a-directory/19284034#19284034
## Ref: https://stackoverflow.com/questions/11929461/how-can-i-run-dos2unix-on-an-entire-directory/11929475#11929475
## Ref: https://unix.stackexchange.com/questions/310432/bash-script-to-convert-all-files-of-a-given-type-from-unix-to-dos-format/310437#310437
## Ref: https://kb.iu.edu/d/acux
## Ref: https://stackoverflow.com/questions/2613800/how-to-convert-dos-windows-newline-crlf-to-unix-newline-lf-in-a-bash-script
## Ref: https://github.com/wp-cli/wp-cli/issues/3181
## Ref: https://github.com/wp-cli/wp-cli/issues/1241
## Ref: https://www.alexgeorgiou.gr/wp-cli-www-data-user-permissions-linux/
## Ref: https://www.darklaunch.com/php-normalize-newlines-line-endings-crlf-cr-lf-unix-windows-mac
## Ref: https://serverfault.com/questions/344544/what-is-the-first-digit-for-in-4-digit-octal-unix-file-permission-notation
## Ref: https://unix.stackexchange.com/questions/79395/how-does-the-sticky-bit-work
## Ref: https://superuser.com/questions/684213/why-are-execute-permissions-along-with-write-permissions-needed-for-creating-a-f
## Ref: https://ubuntuforums.org/showthread.php?t=2383638
## Ref: https://serverfault.com/questions/584986/bad-ownership-or-modes-for-chroot-directory-component
## Ref: https://stackoverflow.com/questions/6851909/how-do-i-delete-everything-in-redis
## Ref: https://serverfault.com/questions/888653/correct-web-user-for-php-fpm-under-nginx
## Ref: https://askubuntu.com/questions/25681/can-scripts-run-even-when-they-are-not-set-as-executable
## Ref: https://serverfault.com/questions/616788/nginx-403-forbidden-on-some-files-extensions
## Ref: https://serverfault.com/questions/686357/unable-to-open-jpeg-files-with-nginx
## Ref: https://askubuntu.com/questions/831414/what-is-the-difference-between-touch-file-and-file
## Ref: https://bash.cyberciti.biz/guide/Setting_up_permissions_on_a_script

## SS_EOF
